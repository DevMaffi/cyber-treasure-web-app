// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String       @unique
  email         String       @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  accounts      Account[]
  profile       Profile?
  preferences   Preferences?
  roles         Moderator[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Profile {
  id          String    @id @default(cuid())
  userId      String    @unique @map("user_id")
  fullName    String?   @map("full_name")
  phoneNumber String?   @unique @map("phone_number")
  birthDate   DateTime? @map("birth_date")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Preferences {
  id          String  @id @default(cuid())
  userId      String  @unique @map("user_id")
  theme       Theme   @default(SYSTEM)
  fluidLayout Boolean @default(true) @map("fluid_layout")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("preferences")
}

model Moderator {
  id           String      @id @default(cuid())
  userId       String      @map("user_id")
  role         Role
  assignedAt   DateTime    @default(now()) @map("assigned_at")
  assignedBy   Moderator?  @relation("AssignedRoles", fields: [assignedById], references: [id], onDelete: Restrict)
  assignedById String?     @map("assigned_by_id")
  assignees    Moderator[] @relation("AssignedRoles")

  user User @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@map("moderators")
}

enum Theme {
  LIGHT  @map("light")
  DARK   @map("dark")
  SYSTEM @map("system")
}

enum Role {
  ADMIN       @map("admin")
  MANAGER     @map("manager")
  CONTRIBUTOR @map("contributor")
  VIEWER      @map("viewer")
}
