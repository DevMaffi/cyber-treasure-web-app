// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  authId      String       @unique @map("auth_id")
  email       String       @unique
  username    String       @unique
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  profile     Profile?
  preferences Preferences?
  roles       Moderator[]

  @@map("users")
}

model Profile {
  id          String    @id @default(cuid())
  fullName    String?   @map("full_name")
  phoneNumber String?   @unique @map("phone_number")
  birthDate   DateTime? @map("birth_date")
  avatarUrl   String    @map("avatar_url")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @unique @map("user_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("profiles")
}

model Preferences {
  id          String   @id @default(cuid())
  theme       Theme    @default(SYSTEM)
  fluidLayout Boolean  @default(true) @map("fluid_layout")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("preferences")
}

model Moderator {
  id           String      @id @default(cuid())
  role         Role
  user         User        @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId       String      @map("user_id")
  assignedAt   DateTime    @default(now()) @map("assigned_at")
  assignedBy   Moderator?  @relation("AssignedRoles", fields: [assignedById], references: [id], onDelete: Restrict)
  assignedById String?     @map("assigned_by_id")
  assignees    Moderator[] @relation("AssignedRoles")

  @@map("moderators")
}

enum Theme {
  LIGHT  @map("light")
  DARK   @map("dark")
  SYSTEM @map("system")
}

enum Role {
  ADMIN       @map("admin")
  MANAGER     @map("manager")
  CONTRIBUTOR @map("contributor")
  VIEWER      @map("viewer")
}
